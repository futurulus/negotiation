#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#




"""Implementation of CRC-32C checksumming.

See http://en.wikipedia.org/wiki/Cyclic_redundancy_check for details on CRC-32C.

This code is a manual python translation of c code generated by
pycrc 0.7.1 (http://www.tty1.net/pycrc/). Command line used:
'./pycrc.py --model=crc-32c --generate c --algorithm=table-driven'
"""




import array

try:
    long
    def L(n):
        return long(n)
except NameError:
    def L(n):
        return n


CRC_TABLE = (
    L(0x00000000), L(0xf26b8303), L(0xe13b70f7), L(0x1350f3f4),
    L(0xc79a971f), L(0x35f1141c), L(0x26a1e7e8), L(0xd4ca64eb),
    L(0x8ad958cf), L(0x78b2dbcc), L(0x6be22838), L(0x9989ab3b),
    L(0x4d43cfd0), L(0xbf284cd3), L(0xac78bf27), L(0x5e133c24),
    L(0x105ec76f), L(0xe235446c), L(0xf165b798), L(0x030e349b),
    L(0xd7c45070), L(0x25afd373), L(0x36ff2087), L(0xc494a384),
    L(0x9a879fa0), L(0x68ec1ca3), L(0x7bbcef57), L(0x89d76c54),
    L(0x5d1d08bf), L(0xaf768bbc), L(0xbc267848), L(0x4e4dfb4b),
    L(0x20bd8ede), L(0xd2d60ddd), L(0xc186fe29), L(0x33ed7d2a),
    L(0xe72719c1), L(0x154c9ac2), L(0x061c6936), L(0xf477ea35),
    L(0xaa64d611), L(0x580f5512), L(0x4b5fa6e6), L(0xb93425e5),
    L(0x6dfe410e), L(0x9f95c20d), L(0x8cc531f9), L(0x7eaeb2fa),
    L(0x30e349b1), L(0xc288cab2), L(0xd1d83946), L(0x23b3ba45),
    L(0xf779deae), L(0x05125dad), L(0x1642ae59), L(0xe4292d5a),
    L(0xba3a117e), L(0x4851927d), L(0x5b016189), L(0xa96ae28a),
    L(0x7da08661), L(0x8fcb0562), L(0x9c9bf696), L(0x6ef07595),
    L(0x417b1dbc), L(0xb3109ebf), L(0xa0406d4b), L(0x522bee48),
    L(0x86e18aa3), L(0x748a09a0), L(0x67dafa54), L(0x95b17957),
    L(0xcba24573), L(0x39c9c670), L(0x2a993584), L(0xd8f2b687),
    L(0x0c38d26c), L(0xfe53516f), L(0xed03a29b), L(0x1f682198),
    L(0x5125dad3), L(0xa34e59d0), L(0xb01eaa24), L(0x42752927),
    L(0x96bf4dcc), L(0x64d4cecf), L(0x77843d3b), L(0x85efbe38),
    L(0xdbfc821c), L(0x2997011f), L(0x3ac7f2eb), L(0xc8ac71e8),
    L(0x1c661503), L(0xee0d9600), L(0xfd5d65f4), L(0x0f36e6f7),
    L(0x61c69362), L(0x93ad1061), L(0x80fde395), L(0x72966096),
    L(0xa65c047d), L(0x5437877e), L(0x4767748a), L(0xb50cf789),
    L(0xeb1fcbad), L(0x197448ae), L(0x0a24bb5a), L(0xf84f3859),
    L(0x2c855cb2), L(0xdeeedfb1), L(0xcdbe2c45), L(0x3fd5af46),
    L(0x7198540d), L(0x83f3d70e), L(0x90a324fa), L(0x62c8a7f9),
    L(0xb602c312), L(0x44694011), L(0x5739b3e5), L(0xa55230e6),
    L(0xfb410cc2), L(0x092a8fc1), L(0x1a7a7c35), L(0xe811ff36),
    L(0x3cdb9bdd), L(0xceb018de), L(0xdde0eb2a), L(0x2f8b6829),
    L(0x82f63b78), L(0x709db87b), L(0x63cd4b8f), L(0x91a6c88c),
    L(0x456cac67), L(0xb7072f64), L(0xa457dc90), L(0x563c5f93),
    L(0x082f63b7), L(0xfa44e0b4), L(0xe9141340), L(0x1b7f9043),
    L(0xcfb5f4a8), L(0x3dde77ab), L(0x2e8e845f), L(0xdce5075c),
    L(0x92a8fc17), L(0x60c37f14), L(0x73938ce0), L(0x81f80fe3),
    L(0x55326b08), L(0xa759e80b), L(0xb4091bff), L(0x466298fc),
    L(0x1871a4d8), L(0xea1a27db), L(0xf94ad42f), L(0x0b21572c),
    L(0xdfeb33c7), L(0x2d80b0c4), L(0x3ed04330), L(0xccbbc033),
    L(0xa24bb5a6), L(0x502036a5), L(0x4370c551), L(0xb11b4652),
    L(0x65d122b9), L(0x97baa1ba), L(0x84ea524e), L(0x7681d14d),
    L(0x2892ed69), L(0xdaf96e6a), L(0xc9a99d9e), L(0x3bc21e9d),
    L(0xef087a76), L(0x1d63f975), L(0x0e330a81), L(0xfc588982),
    L(0xb21572c9), L(0x407ef1ca), L(0x532e023e), L(0xa145813d),
    L(0x758fe5d6), L(0x87e466d5), L(0x94b49521), L(0x66df1622),
    L(0x38cc2a06), L(0xcaa7a905), L(0xd9f75af1), L(0x2b9cd9f2),
    L(0xff56bd19), L(0x0d3d3e1a), L(0x1e6dcdee), L(0xec064eed),
    L(0xc38d26c4), L(0x31e6a5c7), L(0x22b65633), L(0xd0ddd530),
    L(0x0417b1db), L(0xf67c32d8), L(0xe52cc12c), L(0x1747422f),
    L(0x49547e0b), L(0xbb3ffd08), L(0xa86f0efc), L(0x5a048dff),
    L(0x8ecee914), L(0x7ca56a17), L(0x6ff599e3), L(0x9d9e1ae0),
    L(0xd3d3e1ab), L(0x21b862a8), L(0x32e8915c), L(0xc083125f),
    L(0x144976b4), L(0xe622f5b7), L(0xf5720643), L(0x07198540),
    L(0x590ab964), L(0xab613a67), L(0xb831c993), L(0x4a5a4a90),
    L(0x9e902e7b), L(0x6cfbad78), L(0x7fab5e8c), L(0x8dc0dd8f),
    L(0xe330a81a), L(0x115b2b19), L(0x020bd8ed), L(0xf0605bee),
    L(0x24aa3f05), L(0xd6c1bc06), L(0xc5914ff2), L(0x37faccf1),
    L(0x69e9f0d5), L(0x9b8273d6), L(0x88d28022), L(0x7ab90321),
    L(0xae7367ca), L(0x5c18e4c9), L(0x4f48173d), L(0xbd23943e),
    L(0xf36e6f75), L(0x0105ec76), L(0x12551f82), L(0xe03e9c81),
    L(0x34f4f86a), L(0xc69f7b69), L(0xd5cf889d), L(0x27a40b9e),
    L(0x79b737ba), L(0x8bdcb4b9), L(0x988c474d), L(0x6ae7c44e),
    L(0xbe2da0a5), L(0x4c4623a6), L(0x5f16d052), L(0xad7d5351),
    )



CRC_INIT = L(0xffffffff)


def crc_update(crc, data):
  """Update CRC-32C checksum with data.

  Args:
    crc: 32-bit checksum to update as long.
    data: byte array, string or iterable over bytes.

  Returns:
    32-bit updated CRC-32C as long.
  """

  if type(data) != array.array or data.itemsize != 1:
    buf = array.array("B", data)
  else:
    buf = data

  for b in buf:
    table_index = (crc ^ b) & 0xff
    crc = (CRC_TABLE[table_index] ^ (crc >> 8)) & L(0xffffffff)
  return crc & L(0xffffffff)


def crc_finalize(crc):
  """Finalize CRC-32C checksum.

  This function should be called as last step of crc calculation.

  Args:
    crc: 32-bit checksum as long.

  Returns:
    finalized 32-bit checksum as long
  """
  return crc ^ L(0xffffffff)


def crc(data):
  """Compute CRC-32C checksum of the data.

  Args:
    data: byte array, string or iterable over bytes.

  Returns:
    32-bit CRC-32C checksum of data as long.
  """
  return crc_finalize(crc_update(CRC_INIT, data))
